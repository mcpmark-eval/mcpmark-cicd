name: Deployment Status

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  pre-deployment:
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.create_issue.outputs.issue_number }}
      previous_commit: ${{ steps.capture.outputs.previous_commit }}
      commit_sha: ${{ steps.capture.outputs.commit_sha }}
      package_version: ${{ steps.capture.outputs.package_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint --if-present
      - name: Run tests
        run: npm test --if-present
      - name: Capture commit and version
        id: capture
        run: |
          PREVIOUS_COMMIT=$(git rev-parse HEAD^)
          COMMIT_SHA_HEAD=${GITHUB_SHA}
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "previous_commit=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA_HEAD" >> $GITHUB_OUTPUT
          echo "package_version=$PKG_VERSION" >> $GITHUB_OUTPUT
      - name: Create deployment tracking issue
        id: create_issue
        uses: actions/github-script@v6
        with:
          script: |
            const commitSha = '${{ steps.capture.outputs.commit_sha }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue = await github.issues.create({
              owner,
              repo,
              title: `Deployment Tracking - ${commitSha}`
            });
            const number = issue.data.number;
            await github.issues.addLabels({ owner, repo, issue_number: number, labels: ['deployment','in-progress'] });
            core.setOutput('issue_number', number);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Post pre-deployment comment
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = ${{ steps.create_issue.outputs.issue_number }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            await github.issues.createComment({ owner, repo, issue_number, body: 'Pre-deployment checks completed' });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rollback-preparation:
    runs-on: ubuntu-latest
    needs: pre-deployment
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Prepare rollback workspace
        run: |
          COMMIT_SHA='${{ needs.pre-deployment.outputs.commit_sha }}'
          mkdir -p artifacts/rollback
          mkdir -p artifacts/rollback/backup
          echo "#!/usr/bin/env bash" > artifacts/rollback/rollback.sh
          echo "set -euo pipefail" >> artifacts/rollback/rollback.sh
          echo "echo \"Rolling back to commit: $PREVIOUS_COMMIT\"" >> artifacts/rollback/rollback.sh
          echo "git fetch --all" >> artifacts/rollback/rollback.sh
          echo "git reset --hard ${needs.pre-deployment.outputs.previous_commit}" >> artifacts/rollback/rollback.sh
          chmod +x artifacts/rollback/rollback.sh
          # Backups
          cp package.json artifacts/rollback/backup/ || true
          cp package-lock.json artifacts/rollback/backup/ || true
          # Environment template backup
          if [ -f .env.example ]; then
            cp .env.example artifacts/rollback/backup/.env.example
          fi
          # Dependency verification script
          cat > artifacts/rollback/verify-deps.sh <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
node -v
npm -v
EOS
          chmod +x artifacts/rollback/verify-deps.sh
          # Documentation
          cat > artifacts/rollback/README-rollback.md <<'MD'
# Rollback Plan
Follow these steps to rollback deployment if needed.
MD
      - name: Create tarball and checksums
        run: |
          COMMIT_SHA='${{ needs.pre-deployment.outputs.commit_sha }}'
          mkdir -p artifacts/rollback
          tar -czf rollback-package-${COMMIT_SHA}.tar.gz -C artifacts/rollback .
          sha256sum rollback-package-${COMMIT_SHA}.tar.gz > rollback-package-${COMMIT_SHA}.tar.gz.sha256
      - name: Upload rollback artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rollback-artifacts-${{ needs.pre-deployment.outputs.commit_sha }}
          path: |
            artifacts/rollback/**
          retention-days: 30
      - name: Post rollback plan comment
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = ${ { needs.pre-deployment.outputs.issue_number } };
            const commitSha = '${{ needs.pre deployment.outputs.commit_sha }}';
            const previousCommit = '${{ needs.pre deployment.outputs.previous_commit }}';
            // Note: context without spaces in needs reference; using proper syntax
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const artifactName = `rollback-package-${commitSha}`;
            // Read checksum
            const fs = require('fs');
            let checksum = '';
            try {
              checksum = fs.readFileSync(`rollback-package-${commitSha}.tar.gz.sha256`, 'utf8').trim().split(/\s+/)[0];
            } catch (e) {
              checksum = '';
            }
            const body = [
              '**Title:** ðŸ”„ Rollback Plan Ready',
              `- Previous commit: ${previousCommit}`,
              `- Current commit: ${commitSha}`,
              `- Package Version: ${'
'}${context.repo ? '' : ''}`,
              `- Artifact: ${artifactName}`,
              'âœ… âœ… âœ… âœ… âœ…',
              'Quick rollback command:',
              '```bash',
              `git fetch --all`,
              `git reset --hard ${previousCommit}`,
              '```',
              `Rollback script created: true`,
              `Configuration backup: true`,
              `SHA256: ${checksum}`
            ].join('\n');
            if (issue_number) {
              await github.issues.createComment({ owner, repo, issue_number, body });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Signal completion of rollback preparation
        run: echo "Rollback preparation complete" 

  post-deployment:
    runs-on: ubuntu-latest
    needs: rollback-preparation
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Update deployment issue labels
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = ${ { needs.pre-deployment.outputs.issue_number } };
            // Not available in this scope; fallback to needs from pre-deployment
            const issueNumber = issue_number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Get current labels and replace in-progress with completed
            const issue = await github.issues.get({ owner, repo, issue_number: issueNumber });
            const current = issue.data.labels.map(l => l.name);
            const newLabels = current.filter(l => l !== 'in-progress').concat(['completed']);
            await github.issues.update({ owner, repo, issue_number: issueNumber, labels: newLabels });
            // Post final comment
            const commitSha = '${{ needs.pre-deployment.outputs.commit_sha }}';
            const artifactName = `rollback-package-${commitSha}`;
            const body = `Deployment Completed Successfully\nArtifact: ${artifactName}`;
            await github.issues.createComment({ owner, repo, issue_number: issueNumber, body });
            // Close the deployment tracking issue
            await github.issues.update({ owner, repo, issue_number: issueNumber, state: 'closed' });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

